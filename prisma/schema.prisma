datasource db {
  provider = "postgresql"
  url   = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                            String    @id @default(cuid())
  name                          String?
  password                      String?
  email                         String?   @unique
  emailVerified                 DateTime?
  image                         String?
  role                          Role      @default(USER)
  accounts                      Account[]
  addresses                     Address[]
  resetToken                    String?
  resetTokenExpires             DateTime?
  verificationTokenEmail        String?
  verificationTokenExpiresEmail DateTime?
  Cart                          Cart[]
  orders                        Order[]
  stripeCustomerId              String?

  createdRecipes  Recipe[] @relation("CreatedRecipes") // Recettes créées par l'utilisateur
  favoriteRecipes Recipe[] @relation("FavoriteRecipes") // Recettes favorites de l'utilisateur

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  visible  Boolean   @default(true)
  products Product[]

  @@map("categories")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String
  subject     String
  message     String   @db.Text
  submittedAt DateTime @default(now()) @map("submitted_at")

  @@map("contacts")
}

model Product {
  id               String             @id @default(cuid())
  name             String             @unique
  slug             String             @unique
  description      String             @db.Text
  image            String
  price            Int
  visible          Boolean            @default(true)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  categoryId       String             @map("category_id")
  discountId       String?            @map("discount_id")
  category         Category           @relation(fields: [categoryId], references: [id])
  discount         Discount?          @relation(fields: [discountId], references: [id])
  cartItems        CartItem[]
  orderItems       OrderItem[]
  highlighting     Boolean            @default(false)
  stock            Int                @default(100)
  RecipeIngredient RecipeIngredient[]

  @@map("products")
}

model Address {
  id                String  @id @default(cuid())
  name              String
  address           String
  additionalAddress String?
  zipCode           String
  city              String
  phoneNumber       String
  note              String? @db.Text
  isPrincipal       Boolean
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id])

  @@map("address")
}

enum RecipeType {
  STARTER   @map("starter") // Entrée
  MAIN_DISH @map("main_dish") // Plat principal
  DESSERT   @map("dessert") // Dessert
  SNACK     @map("snack") // Gourmandise/Snack
  SIDE_DISH @map("side_dish") // Accompagnement
  BREAKFAST @map("breakfast") // Petit-déjeuner
  BEVERAGE  @map("beverage") // Boisson
}

model Recipe {
  id                             String                          @id @default(cuid())
  name                           String                          @unique
  slug                           String                          @unique
  description                    String                          @db.Text
  image                          String?                         @db.Text
  preparationTime                Int
  cookingTime                    Int
  servings                       Int
  difficulty                     String
  type                           RecipeType
  createdAt                      DateTime                        @default(now()) @map("created_at")
  updatedAt                      DateTime                        @updatedAt @map("updated_at")
  createdBy                      User                            @relation("CreatedRecipes", fields: [userId], references: [id])
  userId                         String                          @map("user_id")
  favoritedBy                    User[]                          @relation("FavoriteRecipes")
  recipeIngredients              RecipeIngredient[]
  recipeMissingIngredientReports RecipeMissingIngredientReport[]
  steps                          RecipeStep[]

  @@map("recipes")
}

model RecipeMissingIngredientReport {
  id                  String                  @id @default(cuid())
  recipeId            String                  @map("recipe_id")
  missingIngredientId String                  @map("missing_ingredient_id")
  quantity            Decimal                 @db.Decimal(10, 2)
  unit                String // Unité de mesure spécifique pour la recette
  recipe              Recipe                  @relation(fields: [recipeId], references: [id])
  missingIngredient   MissingIngredientReport @relation(fields: [missingIngredientId], references: [id])

  @@unique([recipeId, missingIngredientId])
  @@map("recipe_missing_ingredient_reports")
}

model RecipeIngredient {
  id        String  @id @default(cuid())
  recipeId  String  @map("recipe_id")
  productId String  @map("product_id")
  quantity  Decimal @db.Decimal(10, 2)
  unit      String // Unité de mesure spécifique pour la recette
  recipe    Recipe  @relation(fields: [recipeId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([recipeId, productId])
  @@map("recipe_ingredients")
}

model RecipeStep {
  id          String  @id @default(cuid())
  recipeId    String  @map("recipe_id")
  stepNumber  Int
  description String  @db.Text
  image       String?
  duration    Int?
  recipe      Recipe  @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, stepNumber]) // On veut pas de doublons de numéros d'étapes pour une recette
  @@map("recipe_steps")
}

model Discount {
  id       String    @id @default(cuid())
  name     String    @unique
  rate     Int
  visible  Boolean   @default(true)
  products Product[]

  @@map("discount")
}

model Cart {
  id                 String     @id @default(cuid())
  creationDate       DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @default(now()) @map("updated_at")
  userId             String     @map("user_id")
  isConvertedToOrder Boolean
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems          CartItem[]
  totalPrice         Int

  @@map("cart")
}

model CartItem {
  id         String  @id @default(cuid())
  quantity   Int
  cartId     String?
  totalPrice Int
  productId  String  @map("product_id")
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart       Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_item")
}

model MissingIngredientReport {
  id                            String                          @id @default(cuid())
  name                          String
  count                         Int
  createdAt                     DateTime                        @default(now()) @map("created_at")
  updatedAt                     DateTime                        @updatedAt @map("updated_at")
  RecipeMissingIngredientReport RecipeMissingIngredientReport[]

  @@map("missing_ingredient_reports")
}

enum StatusOrder {
  PAYMENT_FAILED
  PAYMENT_PENDING
  PAYMENT_SUCCEDED
  PREPARING
  SHIP
  RECEIVED
}

model Order {
  id          String      @id @default(cuid())
  userId      String      @map("user_id")
  totalAmount Int
  status      StatusOrder @default(PAYMENT_PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  shippingName        String  @map("shipping_name")
  shippingAddress     String  @map("shipping_address")
  shippingAddressAdd  String? @map("shipping_address_add")
  shippingZipCode     String  @map("shipping_zip_code")
  shippingCity        String  @map("shipping_city")
  shippingPhoneNumber String  @map("shipping_phone_number")
  shippingNote        String? @map("shipping_note") @db.Text

  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String @map("order_id")
  productId  String @map("product_id")
  quantity   Int
  unitPrice  Int
  totalPrice Int

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}
