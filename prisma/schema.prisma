datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                            String    @id @default(cuid())
  name                          String?
  password                      String?
  email                         String?   @unique
  emailVerified                 DateTime?
  image                         String?
  role                          Role      @default(USER)
  accounts                      Account[]
  addresses                     Address[]
  resetToken                    String?
  resetTokenExpires             DateTime?
  verificationTokenEmail        String?
  verificationTokenExpiresEmail DateTime?
  Cart                          Cart[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  visible  Boolean   @default(true)
  products Product[]

  @@map("categories")
}

model Contact {
  id          String   @id @default(cuid())
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  email       String
  subject     String
  message     String   @db.Text
  submittedAt DateTime @default(now()) @map("submitted_at")

  @@map("contacts")
}

model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String   @db.Text
  image       String
  price       Int
  visible     Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  categoryId  String   @map("category_id")
  discountId  String?  @map("discount_id")

  category  Category   @relation(fields: [categoryId], references: [id])
  discount  Discount?  @relation(fields: [discountId], references: [id])
  cartItems CartItem[]

  @@map("products")
}

model Address {
  id                String  @id @default(cuid())
  name              String
  address           String
  additionalAddress String?
  zipCode           String
  city              String
  phoneNumber       String
  note              String? @db.Text
  isPrincipal       Boolean
  isVisible         Boolean
  userId            String  @map("user_id")
  user              User    @relation(fields: [userId], references: [id])

  @@map("address")
}

model Discount {
  id       String    @id @default(cuid())
  name     String    @unique
  rate     Int
  visible  Boolean   @default(true)
  products Product[]

  @@map("discount")
}

model Cart {
  id                 String     @id @default(cuid())
  creationDate       DateTime   @default(now()) @map("created_at")
  updatedAt          DateTime   @default(now()) @map("updated_at")
  userId             String     @map("user_id")
  isConvertedToOrder Boolean
  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems          CartItem[]
  totalPrice         Int

  @@map("cart")
}

model CartItem {
  id         String  @id @default(cuid())
  quantity   Int
  cartId     String?
  totalPrice Int
  productId  String  @map("product_id")
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  cart       Cart?   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cart_item")
}
