
datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  
}

generator client {
  provider = "prisma-client-js"
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
 
  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[] 

  @@map("categories")
}


model Contact {
  id         String   @id @default(cuid())
  firstName  String   @map("first_name")
  lastName   String   @map("last_name")
  email      String
  subject    String
  message    String   @db.Text
  submittedAt DateTime @default(now()) @map("submitted_at")
 
  @@map("contacts")
}


model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String   @db.Text
  image       String
  price       Float
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  categoryId  String   @map("category_id")

  category    Category @relation(fields: [categoryId], references: [id])

  @@map("products")
}
